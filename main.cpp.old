#include <opencv2/opencv.hpp>
#include <iostream>
#include <stdio.h>
#include <vector>

#include "image.hpp"
#include "rectangle.hpp"
#include "list.hpp"
#include "marker.hpp"

#define VIDEO "sample/2015-06-06-172737.webm"

int main(int argc, char* argv[]) {
  std::cout << "GO" << std::endl;
  cv::VideoCapture cap(VIDEO); // open the default camera
  if(!cap.isOpened())  // check if we succeeded
    return -1;
  
  cv::Mat frame;
  cv::Mat hsv;
  cap >> frame;
  
  Image3D image(frame.cols, frame.rows, NULL);

  std::vector<unsigned char> vecMask(frame.cols * frame.rows);
  Image mask(frame.cols, frame.rows, vecMask.data());

  const Color min(22, 60, 60);
  const Color max(38, 255, 255);
  Rectangle rect(min, max);
  Area resultArea;
  Area searchArea;

  searchArea.minI = 215;
  searchArea.minJ = 550;
  searchArea.maxI = 230;
  searchArea.maxJ = 580;

  searchArea.minI = 180;
  searchArea.minJ = 240;
  searchArea.maxI = 186;
  searchArea.maxJ = 255;


  std::vector<cv::Mat> channels;
  
  std::cout << "start loop" << std::endl;
  std::cout << "mask w = " << mask.width << " h = " << mask.height << std::endl;
  int count = 0;
  while(1) {
    cap >> frame; // get a new frame from camera
    cv::cvtColor(frame, hsv, CV_BGR2HSV);
    image.setData(hsv.data);

    // cv::split(hsv, channels);
    // imshow("h", channels[0]);
    // imshow("s", channels[1]);
    // imshow("v", channels[2]);

    // int i = 185;
    // int j = 240;
    // std::cout << i << "," << j << " : " << (int) image.getValue(i, j).v1 << std::endl;
    // std::cout << i << "," << j << " : " << (int) image.getValue(i, j).v2 << std::endl;
    // std::cout << i << "," << j << " : " << (int) image.getValue(i, j).v3 << std::endl;
    // for (int k=4; k<14; k+=3) {
    //    cv::rectangle(frame, cv::Point(j-k, i-k), cv::Point(j+k, i+k), cv::Scalar(0, 255, 255));
    // }

    for (int index=0; index<mask.width*mask.height; ++index)
      vecMask[index] = 0;
    if (rect.getArea(image, mask, searchArea, resultArea)) {
      //std::cout << count << " \t size : " << resultArea.size << " \t error : " << resultArea.error << std::endl;
      searchArea = resultArea;
    } else {
      std::cout << "not found" << std::endl;
    }
    
    for (int im=0; im<mask.height; ++im) {
      for (int jm=0; jm<mask.width; ++jm) {
    	if (mask.getValue(im, jm) == 1)
    	  cv::line(frame, cv::Point(jm, im), cv::Point(jm, im), cv::Scalar(255, 0, 0));
      }
    }
    cv::rectangle(frame, cv::Point(resultArea.minJ, resultArea.minI), cv::Point(resultArea.maxJ, resultArea.maxI), cv::Scalar(0, 0, 0));
    cv::imshow("img", frame);
    cv::waitKey(2);
    if (count > 2250)
      cv::waitKey(2);
    count++;
    if (count % 64 == 0)
      std::cout << count << std::endl;
  }
}
